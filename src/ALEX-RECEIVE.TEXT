PROGRAM RECEIVE;

USES
    {$U syscall}  syscall;

LABEL 999;

TYPE
    byte = -128..127;
    char = 0..255;

VAR
    portPath: pathname;
    ecode: integer;
    rawData: byte;
    character: char;
    readCount: longint;
    port: integer;
    index: integer;
    outString: string[255];
    filename: string[255];
    outFile: text;
    altConsole: text;
    line: integer;

BEGIN
    portPath := '-RS232B-MEOW';
    rewrite(altConsole, '-ALTCONSOLE-MEOW');
    ecode := ioresult;
    if ecode <> 0 then
        begin
            writeln('ERROR: Failed to open alt console! Ecode is: ', ecode);
            exit(RECEIVE);
        end;
    open(ecode, portPath, port, [DRead]);
    if ecode <> 0 then
        begin
            writeln(altConsole, 'ERROR: Failed to open console! Ecode is: ', ecode);
            exit(RECEIVE);
        end;
    write('Enter an output filename: ');
    readln(filename);
    rewrite(outFile, filename); 
    ecode := ioresult;
    if ecode <> 0 then
        begin
            writeln(altConsole, 'ERROR: Failed to open output file! Ecode is: ', ecode);
            exit(RECEIVE);
        end;
    writeln(altConsole);
    writeln(altConsole, 'Ready to receive data for file: ', filename);
    writeln('Ready to receive data for file: ', filename);
    index := 1;
    line := 1;
    outString[1] := chr(0);
    outString[2] := chr(0);
    outString[3] := chr(0);
    rawData := 0;
    while true do
        begin
            read_data(ecode, port, ord4(@rawData), 1, readCount, Sequential, 0);
            if (ecode = 0) and (readCount = 1) then
                begin
                    if rawData < 0 then character := 256 + rawData
                    else character := rawData;
                    if character = 13 then
                        begin
                            if (ord(outString[1]) = 3) and (ord(outString[2]) = 3) and (ord(outString[3]) = 3) then goto 999;
                            outString[0] := chr(index-1);
                            index := 1;
                            if line mod 100 = 0 then writeln(altConsole, 'Processed line ', line, ' of file...');
                            line := line + 1;
                            writeln(outFile, outString);
                        end
                    else
                        begin
                            outString[index] := chr(character);
                            index := index + 1;
                        end;
                end
            else
                begin
                    writeln(altConsole, '-------- ERROR: ECODE IS ', ecode, ' AND READCOUNT IS ', readCount, ' --------');
                end;
        end;
999:
    writeln(altConsole, 'Received an EOF, saving ', line, ' lines of text to ', filename, '...');
    close(outFile, lock);
    ecode := ioresult;
    if ecode <> 0 then
        begin
            writeln(altConsole, 'ERROR: Failed to close output file! Ecode is: ', ecode);
        end;
    close_object(ecode, port);
    if ecode <> 0 then
        begin
            writeln(altConsole, 'ERROR: Failed to close console! Ecode is: ', ecode);
        end;
    writeln(altConsole, 'That''s all folks!');
    close(altConsole);
    writeln('That''s all folks!');
END.